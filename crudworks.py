import os
import gc
import sys
import h5py
import yaml
import numpy
import argparse
import pickle
import random
import time
from multiprocessing import Pool
from matplotlib import pyplot


#EXPECTED_AXIAL_DISTRIBUTION_PERCENTAGE = {0:{0:	1,1:1,2:1,3:1,4:1,5:1,6:1,7:1,8:1,9:1,10:1,11:1,12:1,13:1,14:1,15:1,
#                                        16:1,17:1,18:1,19:1,20:1,21:1,22:1,23:1,24:1,25:1,26:1,27:1,28:1,29:1,30:1,
#                                        31:1,32:1,33:1,34:1,35:1,36:1,37:1,38:1,39:1,40:1,41:1,42:1,43:1,44:1,45:1,46:1,47:1,48:1},
#
#                                        1:{0:	0.000487564,1:	0.001167585,2:	0.001314525,3:	0.00143124,4:	0.001522664,5:	0.00159787,6:	0.001662865,7:	0.001719589,8:	0.000585236,9:	0.001438808,
#                                        10:	0.00164465,11:	0.001778245,12:	0.001864683,13:	0.002085892,14:	0.002616661,15:	0.000663532,16:	0.00163721,17:	0.002050705,18:	0.00427999,19:	0.007269783,
#                                        20:	0.010449069,21:	0.013907059,22:	0.000732568,23:	0.002169139,24:	0.008108031,25:	0.018661367,26:	0.029931469,27:	0.039099681,28:	0.046919694,29:	0.001007521,
#                                        30:	0.007690225,31:	0.027140783,32:	0.050654252,33:	0.066536679,34:	0.076629572,35:	0.082920957,36:	0.0033468,37:	0.02059632,38:	0.050690512,39:	0.071682464,
#                                        40:	0.080161379,41:	0.079627134,42:	0.073831392,43:	0.004798731,44:	0.018762398,45:	0.02649016,46:	0.024281871,47:	0.0157173,48:	0.008636175},
#
#                                        2:{0:	0.000441609,1:0.001127635,2:0.00132559,3:0.001467938,4:0.001571865,5:0.00165335,6:	0.001721777,7:	0.00178047,8:	0.000526288,9:	0.001380485,
#                                        10:	0.001649656,11:	0.001815699,12:	0.001917067,13:	0.00214583,14:	0.00269077,15:	0.000591464,16:	0.001559919,17:	0.002047023,18:	0.004329658,19:	0.007393995,
#                                        20:	0.010789316,21:	0.014599611,22:	0.000645817,23:	0.002046578,24:	0.007956181,25:	0.019383341,26:	0.03133489,27:	0.040911058,28:	0.048947155,29:	0.00086912,
#                                        30:	0.007018279,31:	0.027150578,32:	0.051536606,33:	0.068002996,34:	0.078246327,35:	0.084414322,36:	0.00274156,37:	0.018874078,38:	0.049318659,39:	0.071111348,
#                                        40:	0.079892305,41:	0.079366526,42:	0.073468336,43:	0.003811208,44:	0.016581171,45:	0.02498126,46:	0.023399403,47:	0.01518568,48:	0.008278205},
#
#                                        3:{0:	0.000379222,1:	0.001037497,2:	0.001286305,3:	0.001456505,4:	0.001573512,5:	0.001660685,6:	0.001731512,7:	0.001791004,8:	0.000449092,9:	0.001261917,
#                                        10:	0.001592377,11:	0.001794302,12:	0.001912583,13:	0.002153151,14:	0.002709533,15:	0.000501279,16:	0.001416556,17:	0.001980741,18:	0.004253444,19:	0.00764221,
#                                        20:	0.011886512,21:	0.016557342,22:	0.000542155,23:	0.001858806,24:	0.007947554,25:	0.021548483,26:	0.034532473,27:	0.044605835,28:	0.052818241,29:	0.000720735,
#                                        30:	0.006261584,31:	0.028139629,32:	0.053400989,33:	0.070056218,34:	0.079887377,35:	0.08537892,36:	0.002126488,37:	0.017465187,38:	0.047564865,39:	0.069315804,
#                                        40:	0.077780135,41:	0.077038974,42:	0.071068007,43:	0.002863258,44:	0.014162902,45:	0.022679793,46:	0.021679217,47:	0.014069475,48:	0.007459614},
#
#                                        4:{0:	0.000334013,1:	0.000944829,2:	0.001209176,3:	0.001389384,4:	0.001510206,5:	0.001597751,6:	0.001667466,7:	0.00172519,8:	0.000394789,9:	0.001146069,
#                                        10:	0.001493056,11:	0.001708088,12:	0.001832211,13:	0.00205736,14:	0.00258059,15:	0.00043976,16:	0.001282452,17:	0.0018426,18:	0.004025505,19:	0.008003461,
#                                        20:	0.013181079,21:	0.018504149,22:	0.000473965,23:	0.00165691,24:	0.008264199,25:	0.023609047,26:	0.037115306,27:	0.047345217,28:	0.055487675,29:	0.000615552,
#                                        30:	0.006065587,31:	0.029417414,32:	0.054748205,33:	0.07081983,34:	0.079868808,35:	0.084602834,36:	0.001877178,37:	0.017482358,38:	0.04684641,39:	0.067515153,
#                                        40:	0.075237882,41:	0.074291956,42:	0.068464982,43:	0.002628567,44:	0.013501955,45:	0.021696505,46:	0.020845373,47:	0.013584829,48:	0.007067112},
#
#                                        5:{0: 0.000303428,1: 0.000872227,2: 0.001137809,3: 0.001320335,4: 0.001441303,5: 0.001527453,6: 0.001595071,7: 0.001650369,8: 0.00035857,9: 0.001056789,
#                                        10: 0.001402431,11: 0.001619971,12: 0.00174458,13: 0.001929093,14: 0.002377778,15: 0.000398867,16: 0.001179563,17: 0.001685573,18: 0.003798408,19: 0.008387901,
#                                        20: 0.014190583,21: 0.019883209,22: 0.000429067,23: 0.001452251,24: 0.008601447,25: 0.024930565,26: 0.038603692,27: 0.048735525,28: 0.05668173,29: 0.000524889,
#                                        30: 0.006090683,31: 0.030271623,32: 0.055258066,33: 0.070657921,34: 0.079072381,35: 0.08330766,36: 0.001773978,37: 0.017819134,38: 0.046689246,39: 0.066350689,
#                                        40: 0.073505969,41: 0.072504204,42: 0.066934051,43: 0.002684165,44: 0.01367554,45: 0.021776277,46: 0.020960172,47: 0.013734364,48: 0.007113399},
#
#                                        6:{0:	0.000278456,1:0.000808646,2:0.001069061,3:0.001249817,4:0.001368841,5:0.001452533,6:0.001517418,7:0.001569847,8:0.000329199,9:0.000979256,
#                                        10:	0.00131563,11:0.001529989,12:0.001652138,13:0.001792992,14:0.002163042,15:0.00036555,16:0.001090022,17:0.001533081,18:0.00370678,19:0.008861564,
#                                        20:	0.015040571,21:0.020899554,22:0.000392444,23:0.001266212,24:0.008999735,25:0.025759775,26:0.039235056,27:0.049015292,28:0.056632557,29:0.000447265,
#                                        30:	0.006351648,31:0.03079179,32:0.054972597,33:0.069638949,34:0.07753645,35:0.08146882,36:0.001841803,37:0.018534669,38:0.046765813,39:0.065475113,
#                                        40:	0.072239082,41:0.071326319,42:	0.06611872,43:	0.003006489,44:	0.014657218,45:	0.02277755,46:	0.021961712,47:	0.014600097,48:	0.00761284},
#
#                                        7:{0:	0.000256121,1:0.000749778,2:0.001001672,3:0.001178176,4:0.001293928,5:0.001374496,6:0.00143627,7:0.00148558,8:0.000303047,9:0.000907898,
#                                        10:	0.001230981,11:0.001438776,12:0.001556623,13:0.001665879,14:0.002014359,15:0.00033577,16:0.001007404,17:0.001400745,18:0.003851597,19:0.009570295,
#                                        20:	0.015916782,21:0.021734273,22:0.000359669,23:0.001120797,24:0.009619465,25:0.026304874,26:0.039331684,27:0.048601431,28:0.055778549,29:0.000389416,
#                                        30:	0.006939546,31:	0.031145505,32:0.054170746,33:0.06805608,34:0.07550021,35:0.079222572,36:0.00208256,37:0.019546163,38:0.046888409,39:0.064649734,
#                                        40:	0.07109162,41:0.0703221,42:	0.065510312,43:	0.003519279,44:	0.016100564,45:	0.024211483,46:	0.023406648,47:	0.015928319,48:	0.008491812},
#
#                                        8:{0:	0.000239953,1:0.0007052,2:0.000948356,3:0.001120333,4:0.001232888,5:0.001310577,6:0.001369487,7:0.001415793,8:0.000284204,9:0.000853757,
#                                        10:	0.001162986,11:	0.001362907,12:0.001475552,13:0.001564597,14:0.001901531,15:0.000313733,16:0.000942873,17:0.001300567,18:0.003831368,19:0.009716186,
#                                        20:	0.015893013,21:	0.021450653,22:	0.00033541,23:0.001024832,24:0.009814685,25:0.025934178,26:	0.038489953,27:	0.047365243,28:	0.054247064,29:	0.000357553,
#                                        30:	0.007492224,31:	0.031229123,32:	0.053311499,33:	0.066701151,34:	0.073960303,35:	0.077674605,36:	0.002409279,37:	0.020637189,38:	0.047439583,39:	0.064602422,
#                                        40:	0.070876427,41:	0.070246574,42:	0.065744613,43:	0.004069411,44:	0.017626013,45:	0.025853307,46:	0.025088013,47:	0.017469274,48:	0.009603559},
#
#                                        9:{0:0.000229494,1:0.000675317,2:0.000911453,3:0.001079777,4:0.001189657,5:0.001264707,6:0.001320699,7:0.001363638,8:0.000271668,9:0.000815564,
#                                        10:0.00111165,11:0.001302989,12:0.001409616,13:0.001483967,14:0.001739652,15:0.000297869,16:0.000893799,17:0.001224854,18:0.003195659,19:0.008219108,
#                                        20:0.013661407,21:0.018688199,22:0.000317976,23:0.000960136,24:0.008563957,25:0.023415268,26:0.035479431,27:0.04421027,28:0.05116449,29:0.000338884,
#                                        30:0.007297473,31:0.03051773,32:0.052307956,33:0.065868889,34:0.073541953,35:0.077724032,36:0.002678178,37:0.021901571,38:0.049275723,39:0.066578628,
#                                        40:0.073054016,41:0.072643702,42:0.068370277,43:0.004692709,44:0.019704065,45:0.028495745,46:0.027768208,47:0.019687144,48:0.011090845},
#
#                                        10:{0:0.000223033,1:0.000656628,2:0.00088805,3:0.001053877,4:0.001161469,5:0.001233775,6:0.00128633,7:0.001325216,8:0.000263173,9:0.000788216,
#                                        10:0.001072237,11:0.001254789,12:0.001355017,13:0.001418042,14:0.001577887,15:0.00028598,16:0.000855471,17:0.001165701,18:0.002383772,19:0.005796294,
#                                        20:0.009873039,21:0.013971083,22:0.000304894,23:0.000913123,24:0.006150266,25:0.01877926,26:0.030000514,27:0.03863479,28:0.045821893,29:0.00032344,
#                                        30:0.006012738,31:0.028306049,32:0.050232053,33:0.064660523,34:0.073459925,35:0.078750487,36:0.002687805,37:0.022945256,38:0.052213388,39:0.070668083,
#                                        40:0.077959503,41:0.078034618,42:0.074041974,43:0.005444448,44:0.022718104,45:0.032714586,46:0.032042139,47:0.023079977,48:0.013211086},
#
#                                        11:{0:	0.000218827,1:	0.000644869,2:	0.000873653,3:	0.001037991,4:	0.00114343,5:	0.001212719,6:	0.001261292,7:	0.001295706,8:	0.000256876,9:	0.000767355,
#                                        10:	0.001040734,11:	0.001215003,12:	0.001309133,13:	0.001364084,14:	0.00146574,15:	0.000276646,16:	0.000824757,17:	0.001118508,18:	0.00186019,19:	0.003861098,
#                                        20:	0.006428115,21:	0.009265146,22:	0.000294494,23:	0.000877868,24:	0.003905888,25:	0.013437011,26:	0.023250233,27:	0.031496963,28:	0.038741746,29:	0.000312244,30:	0.004169505,31:	0.024549722,
#                                        32:	0.046385276,33:	0.061885285,34:	0.0722109,35:	0.07909658,36:	0.002387825,37:	0.023158003,38:	0.055005634,39:	0.075507418,40:	0.084332208,41:	0.08536431,42:	0.081928315,
#                                        43:	0.006307161,44:	0.026609825,45:	0.038356176,46:	0.037825094,47:	0.027733737,48:	0.016128708},
#
#                                        12:{0:0.000217275,1:0.000640803,2:0.000869213,3:0.001033344,4:0.001137007,5:0.001203385,6:0.001247995,7:0.001278176,
#                                        8:0.000253629,9:0.000755286,10:0.001020537,11:0.001188059,12:0.001277137,13:0.001326431,14:0.001394404,15:0.000271121,
#                                        16:0.000805048,17:0.001086589,18:0.001569376,19:0.002735294,20:0.004231723,21:0.00594294,22:0.000288102,23:0.000855342,
#                                        24:0.002542573,25:0.008894625,26:0.016906959,27:0.024383008,28:0.031375584,29:0.000305953,30:0.002608753,31:0.020099964,
#                                        32:0.041277166,33:0.057480318,34:0.069253765,35:0.077830863,36:0.001888448,37:0.022279323,38:0.05650643,39:0.079548357,
#                                        40:0.090484468,41:0.093021088,42:0.090568962,43:0.007120066,44:0.030827437,45:0.044690211,46:0.044494402,47:0.033230381,48:0.019752679},
#
#                                        13:{0:0.000219212,1:0.000646581,2:0.000877431,3:0.001043144,4:0.001145863,5:0.001209884,6:0.001251025,7:0.001277589,8:0.000254607,9:0.000755265,
#                                        10:0.001015913,11:0.001178939,12:0.001264397,13:0.001309881,14:0.00135806,15:0.000270621,16:0.000799705,17:0.001073665,18:0.001413735,19:0.002110771,
#                                        20:0.002981939,21:0.003968767,22:0.000287023,23:0.000848184,24:0.001840836,25:0.005718169,26:0.011805996,27:0.01826979,28:0.02474593,29:0.000305033,
#                                        30:0.00167139,31:0.015811137,32:0.035853778,33:0.052164085,34:0.064999559,35:0.075063118,36:0.00136168,37:0.020542333,38:0.056433801,39:0.082087975,
#                                        40:0.095425068,41:0.099928985,42:0.098915913,43:0.007755442,44:0.034874815,45:0.05115595,47:0.039198108,46:0.051575755,48:0.023933149},
#
#                                        14:{0:0.000224606,1:0.000662398,2:0.000898824,3:0.00106815,4:0.001171041,5:0.001233495,6:0.001271878,7:0.001295549,
#                                        8:0.000259743,9:0.00076755,10:0.001027681,11:0.001188832,12:0.001272257,13:0.001315426,14:0.001352041,15:0.000274939,
#                                        16:0.00080865,17:0.001079926,18:0.001342095,19:0.001775692,20:0.002293219,21:0.002864563,22:0.000291056,23:0.00085608,
#                                        24:0.001500825,25:0.003784327,26:0.008149344,27:0.013535263,28:0.019357224,29:0.000309165,30:0.001234428,31:0.01218939,
#                                        32:0.03085157,33:0.046810651,34:0.060190293,35:0.071382,36:0.000939159,37:0.018385981,38:0.055074709,39:0.083072368,
#                                        40:0.098769659,41:0.105451223,42:0.10621026,43:0.008138963,44:0.038344017,45:0.057300813,46:0.05866276,47:0.045311141,48:0.028448775},
#
#                                        15:{0:0.00023306,1:0.000687382,2:0.000932509,3:0.001107447,4:0.001211683,5:0.001273387,6:0.001309716,7:0.001331165,8:0.000268458,9:0.000790783,
#                                        10:0.001054473,11:0.001216387,12:0.001299332,13:0.001341402,14:0.00137139,15:0.000283336,16:0.000830107,17:0.00110341,18:0.001324362,
#                                        19:0.001610144,20:0.001927302,21:0.002264859,22:0.000299434,23:0.000877149,24:0.001349586,25:0.002702206,26:0.005734133,27:0.010121454,
#                                        28:0.015256596,29:0.000317618,30:0.001066518,31:0.009380935,32:0.026608643,33:0.042014479,34:0.055459649,35:0.067395005,36:0.000660728,37:0.016180815,
#                                        38:0.05291519,39:0.082842953,40:0.100645754,41:0.109455888,42:0.112111,43:0.008251004,44:0.040978925,45:0.062797997,46:0.065425725,47:0.051297658,48:0.033080863},
#
#                                        16:{0:0.000244211,1:0.000720662,2:0.000977534,3:0.001159992,4:0.001266686,5:0.001328359,6:0.001363221,7:0.001382981,
#                                        8:0.000280209,9:0.000823505,10:0.001094564,11:0.001259721,12:0.00134361,13:0.001385568,14:0.001411902,15:0.000295137,
#                                        16:0.000862233,17:0.001141872,18:0.001342588,19:0.001545212,20:0.001747746,21:0.001952234,22:0.000311449,23:0.00090948,
#                                        24:0.001298906,25:0.002128329,26:0.00420846,27:0.007758884,28:0.012256383,29:0.000329738,30:0.001020615,31:0.007305151,
#                                        32:0.02316307,33:0.037968151,34:0.051155824,35:0.063484655,36:0.00050066,37:0.014102557,38:0.050350412,39:0.081811574,
#                                        40:0.101398699,41:0.11215863,42:0.116671151,43:0.008122512,44:0.04273383,45:0.067515609,46:0.071689134,47:0.057013765,48:0.037702625},
#
#                                        17:{0:0.000257481,1:0.000760613,2:0.001031842,3:0.001223418,4:0.001333508,5:0.001395747,6:0.001429631,7:0.001448143,8:0.000294264,9:0.00086362,
#                                        10:0.001145318,11:0.001315899,12:0.001401988,13:0.001444651,14:0.001469223,15:0.000309524,16:0.000902685,17:0.001192347,18:0.001385443,19:0.001542475,
#                                        20:0.00168016,21:0.001809417,22:0.00032625,23:0.000950665,24:0.001304436,25:0.001849509,26:0.003284185,27:0.006194076,28:0.010145382,29:0.000344704,
#                                        30:0.001029609,31:0.005834895,32:0.020456603,33:0.034706209,34:0.047495799,35:0.059917597,36:0.000425032,37:0.012236471,38:0.047686419,39:0.080320399,
#                                        40:0.101370928,41:0.113820061,42:0.120041614,43:0.007812865,44:0.04366493,45:0.071372836,46:0.077278132,47:0.062308788,48:0.04218421},
#
#                                        18:{0:	0.000272217,1:	0.000805413,2:	0.001093119,3:	0.001295061,4:	0.001409286,5:	0.001472549,6:	0.001505836,7:	0.001523455,8:	0.00030983,9:	0.000908892,
#                                        10:	0.001203916,11:	0.00138177,12:	0.001471135,13:	0.00151518,14:	0.001539205,15:	0.000325639,16:	0.000949047,17:	0.001251788,18:	0.001444893,19:	0.001577755,
#                                        20:	0.001678848,21:	0.001765325,22:	0.00034294,23:	0.000998224,24:	0.001341423,25:	0.001733573,26:	0.002738923,27:	0.005173834,
#                                        28:	0.008676805,29:	0.000361629,30:	0.001063883,31:	0.004802752,32:	0.018330401,33:	0.032106537,34:	0.044472191,35:	0.056767888,
#                                        36:	0.000401787,37:	0.010590112,38:	0.045101013,39:	0.078591574,40:	0.10085424,41:	0.114735289,42:	0.122482573,43:	0.007386659,
#                                        44:	0.043921498,45:	0.074438697,46:	0.082187754,47:	0.067180831,48:	0.046516808},
#
#                                        19:{0:	0.000287624,1:	0.000852652,2:	0.001158101,3:	0.001371097,4:	0.001489918,5:	0.001554519,6:	0.001587518,7:	0.001604552,8:	0.000326004,9:	0.000956621,
#                                        10:	0.001266795,11:	0.001453282,12:	0.001546757,13:	0.001592713,14:	0.001617008,15:	0.000342523,16:	0.000998475,17:	0.00131646,18:	0.001514268,19:	0.001635578,
#                                        20:	0.001716676,21:	0.001779204,22:	0.000360525,23:	0.001049237,24:	0.001395504,25:	0.001708283,26:	0.002433701,27:	0.004517053,28:	0.007669668,29:	0.000379514,
#                                        30:	0.001109621,31:	0.004079582,32:	0.016659296,33:	0.030049927,34:	0.042023016,35:	0.054063925,36:	0.000405618,37:	0.009164494,38:	0.042711629,39:	0.076771997,
#                                        40:	0.100056915,41:	0.115140071,42:	0.12420254,43:	0.006893768,44:	0.043674627,45:	0.076807853,46:	0.086428302,47:	0.071615464,48:	0.050659522},
#
#                                        20:{0:	0.000299653,1:	0.000889313,2:	0.00120839,3:	0.001429816,4:	0.001552233,5:	0.001617966,6:	0.001650905,7:	0.001667668,8:	0.000338582,9:	0.000993635,
#                                        10:	0.001315795,11:	0.001509313,12:	0.001606247,13:	0.001653893,14:	0.001678759,15:	0.000355748,16:	0.001037136,17:	0.001367358,18:	0.001570558,19:	0.001688224,
#                                        20:	0.001760938,21:	0.001812938,22:	0.000374378,23:	0.001089361,24:	0.00144282,25:	0.001723982,26:	0.002305696,27:	0.00418096,28:	0.007125689,29:	0.000393668,
#                                        30:	0.001148234,31:	0.003674643,32:	0.015625176,33:	0.028772997,34:	0.04048911,35:	0.052296981,36:	0.000416363,37:	0.008215369,38:	0.041051656,39:	0.075386403,
#                                        40:	0.09935371,41:	0.115223276,42:	0.125149214,43:	0.006484672,44:	0.043239085,45:	0.0782294,46:	0.089247698,47:	0.074699993,48:	0.053654396},
#
#                                        21:{0:0.000299653,1:0.000889313,2:0.00120839,3:0.001429816,4:0.001552233,5:0.001617966,6:0.001650905,7:0.001667668,8:0.000338582,9:0.000993635,
#                                        10:0.001315795,11:0.001509313,12:0.001606247,13:0.001653893,14:0.001678759,15:0.000355748,16:0.001037136,17:0.001367358,18:0.001570558,19:0.001688224,
#                                        20:0.001760938,21:0.001812938,22:0.000374378,23:0.001089361,24:0.00144282,25:0.001723982,26:0.002305696,27:0.00418096,28:0.007125689,29:0.000393668,30:0.001148234,
#                                        31:0.003674643,32:0.015625176,33:0.028772997,34:0.04048911,35:0.052296981,36:0.000416363,37:0.008215369,38:0.041051656,39:0.075386403,40:0.09935371,41:0.115223276,
#                                        42:0.125149214,43:0.006484672,44:0.043239085,45:0.0782294,46:0.089247698,47:0.074699993,48:0.053654396},
#
#                                        22:{0:0.000299653,1:0.000889313,2:0.00120839,3:0.001429816,4:0.001552233,5:0.001617966,6:0.001650905,7:0.001667668,8:0.000338582,9:0.000993635,
#                                        10:0.001315795,11:0.001509313,12:0.001606247,13:0.001653893,14:0.001678759,15:0.000355748,16:0.001037136,17:0.001367358,18:0.001570558,19:0.001688224,
#                                        20:0.001760938,21:0.001812938,22:0.000374378,23:0.001089361,24:0.00144282,25:0.001723982,26:0.002305696,27:0.00418096,28:0.007125689,29:0.000393668,
#                                        30:0.001148234,31:0.003674643,32:0.015625176,33:0.028772997,34:0.04048911,35:0.052296981,36:0.000416363,37:0.008215369,38:0.041051656,39:0.075386403,
#                                        40:0.09935371,41:0.115223276,42:0.125149214,43:0.006484672,44:0.043239085,45:0.0782294,46:0.089247698,47:0.074699993,48:0.053654396},
#
#                                        23:{0:0.000299653,1:0.000889313,2:0.00120839,3:0.001429816,4:0.001552233,5:0.001617966,6:0.001650905,7:0.001667668,8:0.000338582,9:0.000993635,
#                                        10:0.001315795,11:0.001509313,12:0.001606247,13:0.001653893,14:0.001678759,15:0.000355748,16:0.001037136,17:0.001367358,18:0.001570558,19:0.001688224,20:0.001760938,
#                                        21:0.001812938,22:0.000374378,23:0.001089361,24:0.00144282,25:0.001723982,26:0.002305696,27:0.00418096,28:0.007125689,29:0.000393668,30:0.001148234,
#                                        31:0.003674643,32:0.015625176,33:0.028772997,34:0.04048911,35:0.052296981,36:0.000416363,37:0.008215369,38:0.041051656,39:0.075386403,40:0.09935371,41:0.115223276,42:0.125149214,
#                                        43:0.006484672,44:0.043239085,45:0.0782294,46:0.089247698,47:0.074699993,48:0.053654396}}

EXPECTED_AXIAL_DISTRIBUTION_PERCENTAGE = {0:{0:	1,1:1,2:1,3:1,4:1,5:1,6:1,7:1,8:1,9:1,10:1,11:1,12:1,13:1,14:1,15:1,
                                            16:1,17:1,18:1,19:1,20:1,21:1,22:1,23:1,24:1,25:1,26:1,27:1,28:1,29:1,30:1,
                                            31:1,32:1,33:1,34:1,35:1,36:1,37:1,38:1,39:1,40:1,41:1,42:1,43:1,44:1,45:1,46:1,47:1,48:1},

                                        1:{0:6.22E-03, 1:6.97E-03, 2:7.77E-03, 3:8.38E-03, 4:8.83E-03, 5:9.20E-03, 6:9.50E-03, 7:9.76E-03, 
                                            8:7.33E-03, 9:8.40E-03,10:9.47E-03,11:1.01E-02,12:1.06E-02,13:1.08E-02,14:1.11E-02,15:8.13E-03,
                                            16:9.34E-03,17:1.05E-02,18:1.12E-02,19:1.16E-02,20:1.19E-02,21:1.21E-02,22:8.85E-03,23:1.02E-02,
                                            24:1.14E-02,25:1.21E-02,26:1.28E-02,27:1.52E-02,28:1.98E-02,29:9.48E-03,30:1.08E-02,31:1.22E-02,
                                            32:2.27E-02,33:4.43E-02,34:6.45E-02,35:8.12E-02,36:9.98E-03,37:1.13E-02,38:2.41E-02,39:6.20E-02,
                                            40:8.99E-02,41:9.66E-02,42:8.78E-02,43:1.02E-02,44:1.14E-02,45:1.32E-02,46:1.35E-02,47:1.26E-02,
                                            48:1.24E-02},

                                        2:{0:5.54E-03, 1:6.59E-03, 2:7.65E-03, 3:8.39E-03, 4:8.90E-03, 5:9.29E-03, 6:9.60E-03, 7:9.87E-03, 
                                            8:6.50E-03, 9:7.90E-03,10:9.29E-03,11:1.01E-02,12:1.06E-02,13:1.09E-02,14:1.12E-02,15:7.16E-03,
                                           16:8.74E-03,17:1.03E-02,18:1.12E-02,19:1.17E-02,20:1.19E-02,21:1.21E-02,22:7.74E-03,23:9.44E-03,
                                           24:1.11E-02,25:1.20E-02,26:1.37E-02,27:1.76E-02,28:2.37E-02,29:8.21E-03,30:1.00E-02,31:1.21E-02,
                                           32:2.60E-02,33:4.86E-02,34:6.82E-02,35:8.38E-02,36:8.56E-03,37:1.04E-02,38:2.56E-02,39:6.22E-02,
                                           40:8.81E-02,41:9.36E-02,42:8.45E-02,43:8.68E-03,44:1.04E-02,45:1.28E-02,46:1.33E-02,47:1.23E-02,
                                           48:1.22E-02},

                                        3:{0:4.40E-03, 1:5.66E-03, 2:7.00E-03, 3:7.88E-03, 4:8.45E-03, 5:8.86E-03, 6:9.17E-03, 7:9.43E-03, 
                                           8:5.14E-03, 9:6.76E-03,10:8.45E-03,11:9.46E-03,12:1.00E-02,13:1.04E-02,14:1.06E-02,15:5.62E-03,
                                           16:7.42E-03,17:9.29E-03,18:1.04E-02,19:1.09E-02,20:1.13E-02,21:1.17E-02,22:6.01E-03,23:7.94E-03,
                                           24:9.91E-03,25:1.20E-02,26:1.73E-02,27:2.47E-02,28:3.31E-02,29:6.31E-03,30:8.31E-03,31:1.32E-02,
                                           32:3.37E-02,33:5.66E-02,34:7.46E-02,35:8.76E-02,36:6.51E-03,37:8.94E-03,38:2.95E-02,39:6.28E-02,
                                           40:8.40E-02,41:8.71E-02,42:7.79E-02,43:6.54E-03,44:8.70E-03,45:1.27E-02,46:1.32E-02,47:1.15E-02,
                                           48:1.11E-02},

                                        4:{0:3.58E-03, 1:4.81E-03,  2:6.21E-03,  3:7.13E-03,  4:7.71E-03,  5:8.11E-03,  6:8.41E-03,  7:8.64E-03,  
                                           8:4.16E-03,  9:5.73E-03, 10:7.47E-03, 11:8.53E-03, 12:9.11E-03, 13:9.44E-03, 14:9.65E-03, 15:4.54E-03, 
                                           16:6.25E-03, 17:8.16E-03, 18:9.28E-03, 19:9.86E-03, 20:1.04E-02, 21:1.15E-02, 22:4.83E-03, 23:6.64E-03, 
                                           24:8.64E-03, 25:1.26E-02, 26:2.13E-02, 27:3.11E-02, 28:4.04E-02, 29:5.04E-03, 30:6.91E-03, 31:1.50E-02, 
                                           32:3.95E-02, 33:6.21E-02, 34:7.84E-02, 35:8.94E-02, 36:5.17E-03, 37:8.39E-03, 38:3.30E-02, 39:6.37E-02, 
                                           40:8.13E-02, 41:8.29E-02, 42:7.41E-02, 43:5.18E-03, 44:7.87E-03, 45:1.34E-02, 46:1.37E-02, 47:1.08E-02, 48:9.79E-03},

                                        5:{0:3.13E-03, 1:4.29E-03, 2:5.66E-03, 3:6.58E-03, 4:7.16E-03, 5:7.54E-03, 6:7.83E-03, 7:8.04E-03, 8:3.64E-03, 9:5.10E-03,
                                          10:6.80E-03,11:7.84E-03,12:8.42E-03,13:8.74E-03,14:8.94E-03,15:3.96E-03,16:5.55E-03,17:7.39E-03,18:8.49E-03,19:9.06E-03,
                                          20:9.90E-03,21:1.16E-02,22:4.21E-03,23:5.87E-03,24:7.78E-03,25:1.32E-02,26:2.36E-02,27:3.41E-02,28:4.36E-02,29:4.38E-03,
                                          30:6.08E-03,31:1.63E-02,32:4.21E-02,33:6.43E-02,34:7.97E-02,35:8.96E-02,36:4.49E-03,37:8.36E-03,38:3.51E-02,39:6.47E-02,
                                          40:8.07E-02,41:8.18E-02,42:7.34E-02,43:4.50E-03,44:7.74E-03,45:1.44E-02,46:1.47E-02,47:1.07E-02,48:8.99E-03},

                                        6:{0:2.91E-03, 1:4.01E-03, 2:5.35E-03, 3:6.26E-03, 4:6.83E-03, 5:7.20E-03, 6:7.47E-03, 7:7.68E-03, 8:3.39E-03, 9:4.76E-03,
                                          10:6.40E-03,11:7.43E-03,12:7.99E-03,13:8.30E-03,14:8.49E-03,15:3.67E-03,16:5.16E-03,17:6.93E-03,18:8.01E-03,19:8.56E-03,
                                          20:9.48E-03,21:1.14E-02,22:3.90E-03,23:5.45E-03,24:7.28E-03,25:1.31E-02,26:2.38E-02,27:3.41E-02,28:4.35E-02,29:4.06E-03,
                                          30:5.65E-03,31:1.65E-02,32:4.23E-02,33:6.43E-02,34:7.94E-02,35:8.93E-02,36:4.17E-03,37:8.52E-03,38:3.64E-02,39:6.61E-02,
                                          40:8.19E-02,41:8.31E-02,42:7.53E-02,43:4.21E-03,44:8.14E-03,45:1.58E-02,46:1.61E-02,47:1.12E-02,48:8.67E-03},

 	                                    7:{0:2.79E-03, 1:3.85E-03,2:5.16E-03,3:6.07E-03,4:6.63E-03,5:7.00E-03,6:7.26E-03,7:7.45E-03,8:3.25E-03,9:4.57E-03,10:6.16E-03,
                                          11:7.17E-03,12:7.72E-03,13:8.01E-03,14:8.19E-03,15:3.52E-03,16:4.94E-03,17:6.64E-03,18:7.70E-03,19:8.24E-03,20:8.97E-03,	
                                          21:1.06E-02,22:3.73E-03,23:5.21E-03,24:6.97E-03,25:1.23E-02,26:2.23E-02,27:3.21E-02,28:4.14E-02,29:3.88E-03,30:5.40E-03,	
                                          31:1.60E-02,32:4.11E-02,33:6.34E-02,34:7.91E-02,35:8.93E-02,36:3.99E-03,37:8.63E-03,38:3.73E-02,39:6.78E-02,40:8.43E-02,	
                                          41:8.62E-02,42:7.88E-02,43:4.08E-03,44:8.77E-03,45:1.75E-02,46:1.79E-02,47:1.21E-02,48:8.63E-03},	

                                        8:{0:2.74E-03,1:3.79E-03,2:5.09E-03,3:5.99E-03,4:6.55E-03,5:6.91E-03,6:7.16E-03,7:7.35E-03,8:3.19E-03, 
                                           9:4.49E-03,10:6.05E-03,11:7.04E-03,12:7.58E-03,13:7.87E-03,14:8.04E-03,15:3.44E-03,16:4.83E-03,17:6.50E-03,
                                           18:7.53E-03,19:8.07E-03,20:8.58E-03,21:9.65E-03,22:3.65E-03,23:5.10E-03,24:6.82E-03,25:1.08E-02,26:1.96E-02,
                                           27:2.88E-02,28:3.86E-02,29:3.81E-03,30:5.29E-03,31:1.47E-02,32:3.85E-02,33:6.28E-02,34:8.04E-02,35:9.12E-02,
                                           36:3.92E-03,37:8.36E-03,38:3.72E-02,39:6.92E-02,40:8.71E-02,41:8.99E-02,42:8.29E-02,43:4.01E-03,44:9.17E-03,
                                           45:1.88E-02,46:1.94E-02,47:1.30E-02,48:8.71E-03},

                                        9:{0:2.71E-03,1:3.75E-03,2:5.04E-03,3:5.95E-03,4:6.50E-03,5:6.86E-03,6:7.11E-03,7:7.28E-03,8:3.15E-03,9:4.42E-03,
                                          10:5.97E-03,11:6.95E-03,12:7.48E-03,13:7.76E-03,14:7.92E-03,15:3.38E-03,16:4.75E-03,17:6.39E-03,18:7.41E-03,19:7.93E-03,	
                                          20:8.31E-03,21:8.91E-03,22:3.58E-03,23:5.00E-03,24:6.70E-03,25:9.33E-03,26:1.62E-02,27:2.52E-02,28:3.59E-02,29:3.74E-03,	
                                          30:5.20E-03,31:1.27E-02,32:3.51E-02,33:6.31E-02,34:8.29E-02,35:9.49E-02,36:3.86E-03,37:7.71E-03,38:3.60E-02,39:7.02E-02,
                                          40:9.03E-02,41:9.38E-02,42:8.73E-02,43:3.92E-03,44:9.22E-03,45:1.95E-02,	46:2.05E-02,	47:1.35E-02,48:8.72E-03},	    

         	                            10:{0:2.64E-03, 1:3.66E-03, 2:4.95E-03, 3:5.85E-03, 4:6.40E-03, 5:6.75E-03, 6:6.98E-03, 7:7.15E-03, 8:3.06E-03, 9:4.31E-03,
                                            10:5.83E-03,11:6.79E-03,12:7.30E-03,13:7.57E-03,14:7.72E-03,15:3.28E-03,16:4.61E-03,17:6.21E-03,18:7.20E-03,19:7.72E-03,
                                            20:8.03E-03,21:8.38E-03,22:3.46E-03,23:4.85E-03,24:6.51E-03,25:8.24E-03,26:1.28E-02,27:2.21E-02,28:3.32E-02,29:3.62E-03,
                                            30:5.05E-03,31:1.04E-02,32:3.18E-02,33:6.31E-02,34:8.50E-02,35:9.83E-02,36:3.74E-03,37:6.81E-03,38:3.38E-02,39:7.21E-02,
                                            40:9.53E-02,41:9.92E-02,42:9.19E-02,43:3.78E-03,44:9.01E-03,45:1.99E-02,46:2.12E-02,47:1.38E-02,48:8.62E-03},	 

                                        11:{0:2.52E-03, 1:3.53E-03, 2:4.79E-03, 3:5.67E-03, 4:6.21E-03, 5:6.54E-03, 6:6.76E-03, 7:6.91E-03, 8:2.92E-03, 9:4.13E-03,
                                           10:5.60E-03,11:6.52E-03,12:7.01E-03,13:7.26E-03,14:7.41E-03,15:3.11E-03,16:4.39E-03,17:5.93E-03,18:6.89E-03,19:7.39E-03,
                                           20:7.67E-03,21:7.90E-03,22:3.29E-03,23:4.62E-03,24:6.22E-03,25:7.52E-03,26:1.02E-02,27:1.93E-02,28:3.01E-02,29:3.44E-03,
                                           30:4.82E-03,31:8.44E-03,32:2.88E-02,33:6.18E-02,34:8.45E-02,35:9.94E-02,36:3.57E-03,37:5.95E-03,38:3.14E-02,39:7.53E-02,
                                           40:1.02E-01,41:1.07E-01,42:9.84E-02,43:3.61E-03,44:8.78E-03,45:2.03E-02,46:2.20E-02,47:1.41E-02,48:8.46E-03},

                                        12:{0:2.40E-03, 1:3.36E-03, 2:4.59E-03, 3:5.45E-03, 4:5.96E-03, 5:6.28E-03, 6:6.48E-03, 7:6.61E-03, 8:2.76E-03, 9:3.91E-03,
                                           10:5.32E-03,11:6.20E-03,12:6.66E-03,13:6.90E-03,14:7.03E-03,15:2.94E-03,16:4.15E-03,17:5.61E-03,18:6.53E-03,19:7.00E-03,
                                           20:7.25E-03,21:7.43E-03,22:3.09E-03,23:4.36E-03,24:5.89E-03,25:6.97E-03,26:8.46E-03,27:1.69E-02,28:2.72E-02,29:3.25E-03,
                                           30:4.56E-03,31:7.04E-03,32:2.59E-02,33:5.90E-02,34:8.18E-02,35:9.81E-02,36:3.37E-03,37:5.25E-03,38:2.93E-02,39:7.86E-02,
                                           40:1.08E-01,41:1.15E-01,42:1.07E-01,43:3.42E-03,44:8.73E-03,45:2.14E-02,46:2.36E-02,47:1.48E-02,48:8.39E-03},

                                        13:{0:2.29E-03, 1:3.22E-03, 2:4.41E-03, 3:5.24E-03, 4:5.73E-03, 5:6.03E-03, 6:6.21E-03, 7:6.33E-03, 8:2.63E-03, 9:3.73E-03,
                                           10:5.06E-03,11:5.90E-03,12:6.34E-03,13:6.56E-03,14:6.68E-03,15:2.79E-03,16:3.93E-03,17:5.32E-03,18:6.19E-03,19:6.64E-03,
                                           20:6.88E-03,21:7.02E-03,22:2.93E-03,23:4.13E-03,24:5.58E-03,25:6.55E-03,26:7.48E-03,27:1.48E-02,28:2.45E-02,29:3.08E-03,
                                           30:4.33E-03,31:6.21E-03,32:2.33E-02,33:5.53E-02,34:7.77E-02,35:9.50E-02,36:3.21E-03,37:4.75E-03,38:2.74E-02,39:8.10E-02,
                                           40:1.13E-01,41:1.23E-01,42:1.16E-01,43:3.27E-03,44:8.84E-03,45:2.31E-02,46:2.60E-02,47:1.58E-02,48:8.55E-03},

                                        14:{0:2.22E-03, 1:3.12E-03, 2:4.27E-03, 3:5.08E-03, 4:5.56E-03, 5:5.83E-03, 6:6.00E-03, 7:6.11E-03, 8:2.54E-03, 9:3.59E-03,
                                            10:4.87E-03,11:5.67E-03,12:6.08E-03,13:6.29E-03,14:6.40E-03,15:2.68E-03,16:3.77E-03,17:5.10E-03,18:5.93E-03,19:6.36E-03,
                                            20:6.58E-03,21:6.70E-03,22:2.82E-03,23:3.96E-03,24:5.35E-03,25:6.24E-03,26:6.90E-03,27:1.32E-02,28:2.23E-02,29:2.96E-03,
                                            30:4.16E-03,31:5.75E-03,32:2.11E-02,33:5.16E-02,34:7.32E-02,35:9.07E-02,36:3.09E-03,37:4.43E-03,38:2.54E-02,39:8.20E-02,
                                            40:1.17E-01,41:1.29E-01,42:1.26E-01,43:3.16E-03,44:9.01E-03,45:2.50E-02,46:2.89E-02,47:1.73E-02,48:8.93E-03},

                                        15:{0:2.17E-03, 1:3.05E-03, 2:4.18E-03, 3:4.97E-03, 4:5.42E-03, 5:5.69E-03, 6:5.84E-03, 7:5.93E-03, 8:2.47E-03, 9:3.49E-03,
                                        10:4.72E-03,11:5.49E-03,12:5.89E-03,13:6.08E-03,14:6.18E-03,15:2.60E-03,16:3.66E-03,17:4.93E-03,18:5.73E-03,19:6.14E-03,
                                        20:6.35E-03,21:6.47E-03,22:2.73E-03,23:3.83E-03,24:5.17E-03,25:6.01E-03,26:6.54E-03,27:1.22E-02,28:2.06E-02,29:2.87E-03,
                                        30:4.02E-03,31:5.48E-03,32:1.94E-02,33:4.86E-02,34:6.89E-02,35:8.64E-02,36:3.00E-03,37:4.24E-03,38:2.33E-02,39:8.21E-02,
                                        40:1.19E-01,41:1.36E-01,42:1.34E-01,43:3.08E-03,44:9.05E-03,45:2.66E-02,46:3.15E-02,47:1.87E-02,48:9.36E-03},

                                        16:{0:2.13E-03,1:3.00E-03,2:4.11E-03,3:4.88E-03,4:5.33E-03,5:5.58E-03,6:5.72E-03,7:5.81E-03,8:2.42E-03,9:3.41E-03,10:4.61E-03,
                                        11:5.36E-03,12:5.74E-03,13:5.93E-03,14:6.02E-03,15:2.54E-03,16:3.57E-03,17:4.81E-03,18:5.57E-03,19:5.97E-03,20:6.17E-03,21:6.29E-03,
                                        22:2.67E-03,23:3.74E-03,24:5.03E-03,25:5.84E-03,26:6.31E-03,27:1.15E-02,28:1.95E-02,29:2.80E-03,30:3.92E-03,31:5.30E-03,32:1.81E-02,
                                        33:4.62E-02,34:6.53E-02,35:8.23E-02,36:2.93E-03,37:4.11E-03,38:2.13E-02,39:8.12E-02,40:1.21E-01,41:1.41E-01,42:1.42E-01,43:3.01E-03,
                                        44:8.88E-03,45:2.75E-02,46:3.34E-02,47:1.98E-02,48:9.76E-03},

                                        17:{0:2.09E-03, 1:2.95E-03, 2:4.05E-03, 3:4.82E-03, 4:5.25E-03, 5:5.49E-03, 6:5.63E-03, 7:5.70E-03, 8:2.37E-03, 9:3.35E-03,10:4.52E-03,
                                        11:5.25E-03,12:5.62E-03,13:5.80E-03,14:5.89E-03,15:2.49E-03,16:3.50E-03,17:4.70E-03,18:5.45E-03,19:5.84E-03,20:6.04E-03,21:6.14E-03,
                                        22:2.61E-03,23:3.66E-03,24:4.92E-03,25:5.71E-03,26:6.14E-03,27:1.11E-02,28:1.87E-02,29:2.74E-03,30:3.84E-03,31:5.17E-03,32:1.71E-02,
                                        33:4.46E-02,34:6.23E-02,35:7.86E-02,36:2.87E-03,37:4.02E-03,38:1.93E-02,39:7.94E-02,40:1.23E-01,41:1.47E-01,42:1.50E-01,43:2.95E-03,
                                        44:8.55E-03,45:2.77E-02,46:3.47E-02,47:2.07E-02,48:1.01E-02},

                                        18:{0:2.06E-03, 1:2.91E-03, 2:4.00E-03, 3:4.75E-03, 4:5.17E-03, 5:5.41E-03, 6:5.53E-03, 7:5.60E-03, 8:2.33E-03, 9:3.28E-03,10:4.43E-03,
                                        11:5.14E-03,12:5.51E-03,13:5.68E-03,14:5.77E-03,15:2.44E-03,16:3.42E-03,17:4.61E-03,18:5.34E-03,19:5.72E-03,20:5.91E-03,21:6.01E-03,
                                        22:2.56E-03,23:3.58E-03,24:4.81E-03,25:5.58E-03,26:5.99E-03,27:1.08E-02,28:1.82E-02,29:2.68E-03,30:3.75E-03,31:5.05E-03,32:1.65E-02,
                                        33:4.34E-02,34:6.01E-02,35:7.54E-02,36:2.80E-03,37:3.92E-03,38:1.74E-02,39:7.71E-02,40:1.24E-01,41:1.53E-01,42:1.58E-01,43:2.89E-03,
                                        44:8.06E-03,45:2.72E-02,46:3.51E-02,47:2.13E-02,48:1.04E-02},

                                        19:{0:2.16E-04, 1:8.92E-04, 2:1.81E-03, 3:2.73E-03, 4:3.65E-03, 5:4.57E-03, 6:5.49E-03, 7:6.41E-03, 8:7.08E-03, 9:7.74E-03,10:8.65E-03,
                                        11:9.55E-03,12:1.05E-02,13:1.14E-02,14:1.23E-02,15:1.29E-02,16:1.36E-02,17:1.45E-02,18:1.54E-02,19:1.63E-02,20:1.72E-02,21:1.81E-02,
                                        22:1.88E-02,23:1.94E-02,24:2.03E-02,25:2.12E-02,26:2.21E-02,27:2.30E-02,28:2.39E-02,29:2.46E-02,30:2.53E-02,31:2.62E-02,32:2.71E-02,
                                        33:2.80E-02,34:2.89E-02,35:2.98E-02,36:3.04E-02,37:3.11E-02,38:3.20E-02,39:3.29E-02,40:3.38E-02,41:3.47E-02,42:3.56E-02,43:3.63E-02,
                                        44:3.69E-02,45:3.78E-02,46:3.87E-02,47:3.96E-02,48:4.05E-02},

                                        20:{0:2.01E-03, 1:2.85E-03, 2:3.92E-03, 3:4.66E-03, 4:5.07E-03, 5:5.30E-03, 6:5.41E-03, 7:5.48E-03, 8:2.26E-03, 9:3.20E-03,10:4.33E-03,
                                        11:5.02E-03,12:5.37E-03,13:5.55E-03,14:5.63E-03,15:2.37E-03,16:3.33E-03,17:4.49E-03,18:5.20E-03,19:5.57E-03,20:5.76E-03,21:5.85E-03,
                                        22:2.48E-03,23:3.48E-03,24:4.69E-03,25:5.43E-03,26:5.82E-03,27:1.06E-02,28:1.80E-02,29:2.60E-03,30:3.64E-03,31:4.90E-03,32:1.60E-02,
                                        33:4.28E-02,34:5.89E-02,35:7.31E-02,36:2.71E-03,37:3.81E-03,38:1.57E-02,39:7.47E-02,40:1.24E-01,41:1.59E-01,42:1.65E-01,43:2.80E-03,
                                        44:7.45E-03,45:2.61E-02,46:3.47E-02,47:2.14E-02,48:1.06E-02},

                                        21:{0:2.01E-03,1:2.85E-03,2:3.92E-03,3:4.66E-03,4:5.07E-03,5:5.30E-03,6:5.41E-03,7:5.48E-03,8:2.26E-03,9:3.20E-03,10:4.33E-03,11:5.02E-03,
                                        12:5.37E-03,13:5.55E-03,14:5.63E-03,15:2.37E-03,16:3.33E-03,17:4.49E-03,18:5.20E-03,19:5.57E-03,20:5.76E-03,21:5.85E-03,22:2.48E-03,
                                        23:3.48E-03,24:4.69E-03,25:5.43E-03,26:5.82E-03,27:1.06E-02,28:1.80E-02,29:2.60E-03,30:3.64E-03,31:4.90E-03,32:1.60E-02,33:4.28E-02,
                                        34:5.89E-02,35:7.31E-02,36:2.71E-03,37:3.81E-03,38:1.57E-02,39:7.47E-02,40:1.24E-01,41:1.59E-01,42:1.65E-01,43:2.80E-03,44:7.45E-03,
                                        45:2.61E-02,46:3.47E-02,47:2.14E-02,48:1.06E-02},

                                        22:{0:2.01E-03, 1:2.85E-03, 2:3.92E-03, 3:4.66E-03, 4:5.07E-03, 5:5.30E-03, 6:5.41E-03, 7:5.48E-03, 8:2.26E-03, 9:3.20E-03,10:4.33E-03,
                                        11:5.02E-03,12:5.37E-03,13:5.55E-03,14:5.63E-03,15:2.37E-03,16:3.33E-03,17:4.49E-03,18:5.20E-03,19:5.57E-03,20:5.76E-03,21:5.85E-03,
                                        22:2.48E-03,23:3.48E-03,24:4.69E-03,25:5.43E-03,26:5.82E-03,27:1.06E-02,28:1.80E-02,29:2.60E-03,30:3.64E-03,31:4.90E-03,32:1.60E-02,
                                        33:4.28E-02,34:5.89E-02,35:7.31E-02,36:2.71E-03,37:3.81E-03,38:1.57E-02,39:7.47E-02,40:1.24E-01,41:1.59E-01,42:1.65E-01,43:2.80E-03,
                                        44:7.45E-03,45:2.61E-02,46:3.47E-02,47:2.14E-02,48:1.06E-02},

                                        23:{0:2.01E-03, 1:2.85E-03, 2:3.92E-03, 3:4.66E-03, 4:5.07E-03, 5:5.30E-03, 6:5.41E-03, 7:5.48E-03, 8:2.26E-03, 9:3.20E-03,10:4.33E-03,
                                        11:5.02E-03,12:5.37E-03,13:5.55E-03,14:5.63E-03,15:2.37E-03,16:3.33E-03,17:4.49E-03,18:5.20E-03,19:5.57E-03,20:5.76E-03,21:5.85E-03,
                                        22:2.48E-03,23:3.48E-03,24:4.69E-03,25:5.43E-03,26:5.82E-03,27:1.06E-02,28:1.80E-02,29:2.60E-03,30:3.64E-03,31:4.90E-03,32:1.60E-02,
                                        33:4.28E-02,34:5.89E-02,35:7.31E-02,36:2.71E-03,37:3.81E-03,38:1.57E-02,39:7.47E-02,40:1.24E-01,41:1.59E-01,42:1.65E-01,43:2.80E-03,
                                        44:7.45E-03,45:2.61E-02,46:3.47E-02,47:2.14E-02,48:1.06E-02},

                                        24:{0:2.01E-03, 1:2.85E-03, 2:3.92E-03, 3:4.66E-03, 4:5.07E-03, 5:5.30E-03, 6:5.41E-03, 7:5.48E-03, 8:2.26E-03, 9:3.20E-03,10:4.33E-03,
                                        11:5.02E-03,12:5.37E-03,13:5.55E-03,14:5.63E-03,15:2.37E-03,16:3.33E-03,17:4.49E-03,18:5.20E-03,19:5.57E-03,20:5.76E-03,21:5.85E-03,
                                        22:2.48E-03,23:3.48E-03,24:4.69E-03,25:5.43E-03,26:5.82E-03,27:1.06E-02,28:1.80E-02,29:2.60E-03,30:3.64E-03,31:4.90E-03,32:1.60E-02,
                                        33:4.28E-02,34:5.89E-02,35:7.31E-02,36:2.71E-03,37:3.81E-03,38:1.57E-02,39:7.47E-02,40:1.24E-01,41:1.59E-01,42:1.65E-01,43:2.80E-03,
                                        44:7.45E-03,45:2.61E-02,46:3.47E-02,47:2.14E-02,48:1.06E-02},

                                        25:{0:2.01E-03, 1:2.85E-03, 2:3.92E-03, 3:4.66E-03, 4:5.07E-03, 5:5.30E-03, 6:5.41E-03, 7:5.48E-03, 8:2.26E-03, 9:3.20E-03,10:4.33E-03,
                                        11:5.02E-03,12:5.37E-03,13:5.55E-03,14:5.63E-03,15:2.37E-03,16:3.33E-03,17:4.49E-03,18:5.20E-03,19:5.57E-03,20:5.76E-03,21:5.85E-03,
                                        22:2.48E-03,23:3.48E-03,24:4.69E-03,25:5.43E-03,26:5.82E-03,27:1.06E-02,28:1.80E-02,29:2.60E-03,30:3.64E-03,31:4.90E-03,32:1.60E-02,
                                        33:4.28E-02,34:5.89E-02,35:7.31E-02,36:2.71E-03,37:3.81E-03,38:1.57E-02,39:7.47E-02,40:1.24E-01,41:1.59E-01,42:1.65E-01,43:2.80E-03,
                                        44:7.45E-03,45:2.61E-02,46:3.47E-02,47:2.14E-02,48:1.06E-02}}
	
	      	

VERA_AXIAL_LENGTH = {0:11.53812734, 1:24.50583641, 2:24.50583641, 3:24.50583641, 4:24.50882093,
                     5:24.50583641, 6:24.50583641, 7:24.50583641, 8:11.37099461, 9:24.07009751,
                    10:24.07009751, 11:24.07009751, 12:24.07009751, 13:24.07009751, 14:24.07009751,
                    15:11.37099461, 16:24.07009751, 17:24.07009751, 18:24.07009751, 19:24.07009751,
                    20:24.07009751, 21:24.07009751, 22:11.37099461, 23:24.07009751, 24:24.07009751,
                    25:24.07009751, 26:24.07009751, 27:24.07009751, 28:24.07009751, 29:11.37099461,
                    30:24.07009751, 31:24.07009751, 32:24.07009751, 33:24.07009751, 34:24.07009751,
                    35:24.07009751, 36:11.37099461, 37:24.07009751, 38:24.07009751, 39:24.07009751,
                    40:24.07009751, 41:24.07009751, 42:24.07009751, 43:11.37099461, 44:23.64092454,
                    45:23.64092454, 46:23.64092454, 47:23.64092454, 48:23.64092454}

MAX_DICTIONARY = {'crud_pin': { 0: 0.1*3.686125435450282e-05,   1: 0.1*4.317157371869487e-05,
                                2: 0.1*5.041153716712024e-05,   3: 0.1*5.605278597968903e-05,
                                4: 0.1*6.0681439095403955e-05,  5: 0.1*6.478660960538202e-05,
                                6: 0.1*6.844132384626e-05,      7: 0.1*7.137111442089732e-05,
                                8: 0.1*4.7677467592412765e-05,  9: 0.1*5.831517913804061e-05,
                               10: 0.1*6.952150442104981e-05,  11: 0.1*0.0006659635211291659,
                               12: 0.1*0.0013069460237824264,  13: 0.1*0.0027925943225036768,
                               14: 0.1*0.004529056013055524,   15: 0.1*5.5514662997039225e-05,
                               16: 0.1*0.0004428386074942751,  17: 0.1*0.0018304465787319,
                               18: 0.1*0.005494257102154623,   19: 0.1*0.007464181735191025,
                               20: 0.1*0.009269630565640353,   21: 0.1*0.009722915023254218,
                               22: 0.1*0.0006881307472000992,  23: 0.1*0.0019074644018032215,
                               24: 0.1*0.005539978471528767,   25: 0.1*0.009740614649921861,
                               26: 0.1*0.012567487712694938,   27: 0.1*0.013648844782157697,
                               28: 0.1*0.014004481835200483,   29: 0.1*0.002257350156488779,
                               30: 0.1*0.003366659089173567,   31: 0.1*0.008841941459909113,
                               32: 0.1*0.012302693355611093,   33: 0.1*0.013128090313546326,
                               34: 0.1*0.013374632160950512,   35: 0.1*0.013148421231315174,
                               36: 0.1*0.0032502527620788067,  37: 0.1*0.004876687692248757,
                               38: 0.1*0.008431603376546406,   39: 0.1*0.009493872856344267,
                               40: 0.1*0.009691518548746883,   41: 0.1*0.01004990445328864,
                               42: 0.1*0.009907057435520861,   43: 0.1*0.003133190405792544,
                               44: 0.1*0.005578105629567058,   45: 0.01*0.007419389952083851,
                               46: 0.1*0.007779029184221573,   47: 0.1*0.006153831439465747,
                               48: 0.1*0.003834223763686484},
                  
                  'boron_pin': {0: 1.5237357002636242e-08,  1: 1.7869540246527804e-08,
                                2: 2.0884897216461756e-08,  3: 2.3375678786579035e-08,
                                4: 2.5618513316329056e-08,  5: 2.7429946291035175e-08,
                                6: 2.8977179122699892e-08,  7: 3.021746324835328e-08,
                                8: 1.9901182691933657e-08,  9: 2.4379656651635076e-08,
                               10: 2.906431917893384e-08,  11: 3.2407465409357253e-07,
                               12: 6.688199982716951e-07,  13: 5.008014879427507e-05,
                               14: 0.00022543911942031955, 15: 2.320871903183262e-08,
                               16: 2.0788385236880537e-07, 17: 1.1334805110317173e-06,
                               18: 0.0003602787514031033,  19: 0.0007429837494733374,
                               20: 0.0010756039727130276,  21: 0.0011772751360755796,
                               22: 3.2569322920311073e-07, 23: 1.1729637159769996e-06,
                               24: 0.0003795600455118331,  25: 0.00112985700258536,
                               26: 0.0016810551128656006,  27: 0.0018819306012948529,
                               28: 0.001919631542180409,   29: 1.6806293082053325e-06,
                               30: 7.023702996914096e-05,  31: 0.0009376701556281014,
                               32: 0.001540860519750111,   33: 0.0016585009562696958,
                               34: 0.0016963066404358722,  35: 0.0016386480067760892,
                               36: 3.183611248095038e-06,  37: 0.00027367945127132763,
                               38: 0.0007557543479810881,  39: 0.0009471857766974842,
                               40: 0.0008742552035949627,  41: 0.0008915430263586392,
                               42: 0.0008435618685662999,  43: 2.1722168655572793e-06,
                               44: 0.00010597644039587232, 45: 0.0004029628455017155,
                               46: 0.00041176369266816674, 47: 1.6032558398111568e-06,
                               48: 8.932995408717556e-07},
                  'core_boron': 1433.8,
                  'core_nickel': 8.161141015095946,
                  'cycle_length': 541.7}

def maximum_error(y_true,y_pred):
    import tensorflow.keras.backend as K
    diff = K.abs(y_true-y_pred)

    return K.max(diff)

def magnitude_error(y_true,y_pred):
    import tensorflow.keras.backend as K
    map_ = (((0,16),(0,16)),((0,16),(17,33)),((0,16),(34,50)),((0,16),(51,67)),((0,16),(68,84)),((0,16),(85,101)),((0,16),(102,118)),((0,16),(119,135)),
           ((17,33),(0,16)),((17,33),(17,33)),((17,33),(34,50)),((17,33),(51,67)),((17,33),(68,84)),((17,33),(85,101)),((17,33),(102,118)),((17,33),(119,135)),
           ((34,50),(0,16)),((34,50),(17,33)),((34,50),(34,50)),((34,50),(51,67)),((34,50),(68,84)),((34,50),(85,101)),((34,50),(102,118)),((34,50),(119,135)),
           ((51,67),(0,16)),((51,67),(17,33)),((51,67),(34,50)),((51,67),(51,67)),((51,67),(68,84)),((51,67),(85,101)),((51,67),(102,118)),((51,67),(119,135)),
           ((68,84),(0,16)),((68,84),(17,33)),((68,84),(34,50)),((68,84),(51,67)),((68,84),(68,84)),((68,84),(85,101)),((68,84),(102,118)),((68,84),(119,135)),
           ((85,101),(0,16)),((85,101),(17,33)),((85,101),(34,50)),((85,101),(51,67)),((85,101),(68,84)),((85,101),(85,101)),((85,101),(102,118)),((85,101),(119,135)),
           ((102,118),(0,16)),((102,118),(17,33)),((102,118),(34,50)),((102,118),(51,67)),((102,118),(68,84)),((102,118),(85,101)),((102,118),(102,118)),((102,118),(119,135)),
           ((119,135),(0,16)),((119,135),(17,33)),((119,135),(34,50)),((119,135),(51,67)),((119,135),(68,84)),((119,135),(85,101)),((119,135),(102,118)),((119,135),(119,135)))
     
    total_error_sum = 0.
    assembly_count = 0.
    for assem in map_:
        true_assem_values    = K.sum(y_true[assem[0][0]:assem[0][1],assem[1][0]:assem[1][1],:])
        predict_assem_values = K.sum(y_pred[assem[0][0]:assem[0][1],assem[1][0]:assem[1][1],:])

        total_error_sum += K.abs(true_assem_values - predict_assem_values)
        assembly_count += 1.

    return total_error_sum / assembly_count

class CRUD_Predictor(object):
    """
    Class for using the crUdNET series of neural networks to predict the amount
    of CRUD for the provided neural network core.

    Written by Brian Andersen. 11/2/2020
    """
    def __init__(self,settings):
        info = settings['neural_network']
        self.crud_network_dictionary = info['crud_networks']
        self.number_crud_layers = len(list(self.crud_network_dictionary.keys()))
        if 'boron_networks' in info:
            self.boron_network_dictionary = info['boron_networks']
            self.number_boron_layers = len(list(self.boron_network_dictionary))    
            self.boron_crud_normalization = info['boron_crud_normalization']
            self.boron_normalization = info['boron_normalization']
        else:
            self.boron_network_dictionary = {}
        self.assembly_tuple_193_17_17 = ((0,16),(17,33),(34,50),(51,67),(68,84),(85,101),(102,118),(119,135))
        self.MESH = (11.951,15.817,24.028,32.239,40.45,48.662,56.873,65.084,73.295,77.105,
                     85.17,93.235,101.3,109.365,117.43,125.495,129.305,137.37,145.435,153.5,
                     161.565,169.63,177.695,181.505,189.57,197.635,205.7,213.765,221.83,229.895,
                     233.705,241.77,249.835,257.9,265.965,274.03,282.095,285.905,293.97,302.035,
                     310.1,318.165,326.23,334.295,338.105,346.0262,353.9474,361.8686,369.7898,377.711)

    def evaluator(self,solution):
        """
        Evaluates the CRUD distribution for the given solution.
        """
        crud_matrix = None      #
        boron_matrix = None
        no_crud_matrix = True   #Flag saying I haven't done the CRUD predictions yet
        no_boron_matrix = True  #Flag saying I haven't done the Boron predictions yet.
        axially_adjusted_crud = False #Flag saying I haven't axially adjusted CRUD yet.
        if 'max_assembly_boron' in solution.parameters:
            if 'value' in solution.parameters['max_assembly_boron']:  #Don't do anything since it already failed inspection
                pass
            else:
                if os.path.isfile(f"{solution.name}/crud_input.h5"): #check input file exists. Maybe some sort of fluke
                    if no_boron_matrix:
                        if no_crud_matrix: #If the crud matrix hasn't been calculated yet.
                            crud_matrix = self.predict_crud_distribution(solution.name)
                            no_crud_matrix = False
                        boron_matrix = self.predict_boron_distribution(crud_matrix,solution.name)
                        boron_matrix = self.adjust_prediction_axially(boron_matrix)
                        no_boron_matrix = False
                    
                    #crud_matrix = self.crud.adjust_prediction_axially(crud_matrix)
                    solution.parameters['max_assembly_boron']['value'] = self.calculate_max_assembly_sum(boron_matrix)
                else:
                    solution.parameters['max_assembly_boron']['value'] = 10000000. #If the input file doesn't exist give failed value
        if 'max_core_boron' in solution.parameters:
            if 'value' in solution.parameters['max_core_boron']:  #Don't do anything since it already failed inspection
                pass
            else:
                if os.path.isfile(f"{solution.name}/crud_input.h5"): #check input file exists. Maybe some sort of fluke
                    if no_boron_matrix:
                        if no_crud_matrix: #If the crud matrix hasn't been calculated yet.
                            crud_matrix = self.predict_crud_distribution(solution.name)
                            no_crud_matrix = False
                        boron_matrix = self.predict_boron_distribution(crud_matrix,solution.name)
                        boron_matrix = self.adjust_prediction_axially(boron_matrix)
                        no_boron_matrix = False
                    
                    #crud_matrix = self.crud.adjust_prediction_axially(crud_matrix)
                    solution.parameters['max_core_boron']['value'] = self.calculate_core_max_sum(boron_matrix)
                else:
                    solution.parameters['max_core_boron']['value'] = 10000000. #If the input file doesn't exist give failed value
        if 'max_core_crud' in solution.parameters:
            if 'value' in solution.parameters['max_core_crud']:  #Don't do anything since it already failed inspection
                pass
            else:
                if os.path.isfile(f"{solution.name}/crud_input.h5"): #check input file exists. Maybe some sort of fluke
                    if no_crud_matrix: #If the crud matrix hasn't been calculated yet.
                        crud_matrix = self.predict_crud_distribution(solution.name)
                        no_crud_matrix = False
                    if not axially_adjusted_crud:
                        crud_matrix = self.adjust_prediction_axially(crud_matrix)
                        axially_adjusted_crud = True
                    solution.parameters['max_core_crud']['value'] = self.calculate_core_max_sum(crud_matrix)
                else:
                    solution.parameters['max_core_crud']['value'] = 10000000. #If the input file doesn't exist give failed value
        
        if 'max_assembly_crud' in solution.parameters:
            if 'value' in solution.parameters['max_core_crud']:  #Don't do anything since it already failed inspection
                pass
            else:
                if os.path.isfile(f"{solution.name}/crud_input.h5"): #check input file exists. Maybe some sort of fluke
                    if no_crud_matrix: #If the crud matrix hasn't been calculated yet.
                        crud_matrix = self.predict_crud_distribution(solution.name)
                        no_crud_matrix = False
                    if not axially_adjusted_crud:
                        crud_matrix = self.adjust_prediction_axially(crud_matrix)
                        axially_adjusted_crud = True
                    solution.parameters['max_assembly_crud']['value'] = self.calculate_max_assembly_sum(crud_matrix)
                else:
                    solution.parameters['max_assembly_crud']['value'] = 10000000. #If the input file doesn't exist give failed value
        crud_matrix = None      #
        boron_matrix = None

        K.clear_session()        
        return solution

    def predict_crud_distribution(self,diff_matrix,core_in):
        """
        Predicts the crud distribution based on the differences in pin power, boron, and cycle exposures.
        Note nickel particulate concentration has to be provided by the user in the input file, as
        it doesn't come from the SIMULATE output file. 
        
        Written by Brian Andersen 11/2/2020.
        """
        
        number_states,rows,cols,axial = diff_matrix.shape
        crud_matrix = numpy.zeros([number_states+1,rows,cols,self.number_crud_layers])
        for i,axial in enumerate(self.crud_network_dictionary):
            crud_model = models.load_model(self.crud_network_dictionary[axial],custom_objects={'magnitude_error':magnitude_error,'maximum_error':maximum_error})

            prediction = crud_model.predict([diff_matrix,core_in])
            #prediction = crud_model.predict([diff_matrix,crud_matrix[1:,:,:,:],core_in]) #predict crud over all states
            #                                                                             #undo training normalization
            prediction *= MAX_DICTIONARY['crud_pin'][axial]
            for ss in range(number_states):                        
                if not ss:
                    pass       #Zero burnup means zero crud deposition
                else:
                    crud_matrix[ss,:,:,i] = crud_matrix[ss-1,:,:,i] + prediction[ss-1,:,:,0] #Crud buildup is current crud plus predicted change in crud.
                    for r in range(rows):
                        for c in range(cols):
                            if crud_matrix[ss,r,c,i] < 0.:
                                crud_matrix[ss,r,c,i] = 0.
        K.clear_session()   
        return crud_matrix

    def predict_boron_distribution(self,crud_in,solution_name):
        """
        Predicts the boron distribution based on the differences on the CRUD distribution, boron, and cycle exposures.
        Note nickel particulate concentration has to be provided by the user in the input file, as
        it doesn't come from the SIMULATE output file. 

        Written by Brian Andersen 11/2/2020.
        """
        number_states,row,column,number_layers = crud_in.shape 
        input_ = h5py.File(f"{solution_name}/crud_input.h5",'r')
        core_in = input_['core_in'][:,:] 
        input_.close()

        boron_matrix = numpy.zeros([number_states,row,column,self.number_boron_layers])
        layer_crud = numpy.zeros([number_states,row,column,1])
        for i,axial in enumerate(self.boron_network_dictionary):
            boron_model = models.load_model(self.boron_network_dictionary[axial],custom_objects={'magnitude_error':magnitude_error,'maximum_error':maximum_error})

            layer_crud[:,:,:,0] = numpy.divide(crud_in,MAX_DICTIONARY['crud_pin'][axial]) 
            prediction = boron_model.predict([layer_crud,core_in]) #predict crud over all states
            prediction *= MAX_DICTIONARY['boron_pin'][axial]        #undo training normalization
            for ss in range(number_states):                        
                for r in range(row):
                    for c in range(column):
                        if boron_matrix[ss,r,c,i] < 0.:
                            boron_matrix[ss,r,c,i] = 0.

        K.clear_session()   
        return boron_matrix

#    def calculate_total_boron_masses(self,crud_matrix,boron_concentrations):


    def calculate_expected_mass_distribution(self,crud_predictions,exposure,crud_intercept,crud_slope):
        """
        Takes the radial CRUD distributions predicted by crUdNET, and redistributes with the expected
        Mass in each pin cell.
        """
        new_crud_matrix = numpy.zeros(crud_predictions.shape)
        
  
        for i in range(crud_predictions.shape[0]):
  
            current_exposure = exposure[i]
  
            total_crud_mass = crud_intercept + crud_slope*current_exposure
  
            for j,axial in enumerate(self.crud_network_dictionary):
                sum_ = numpy.sum(crud_predictions[i,:,:,j])

                if not sum_:
                    radial_crud = numpy.zeros([136,136])
                else:    
                    radial_crud = numpy.divide(crud_predictions[i,:,:,j],sum_)
  
                layer_crud_mass = total_crud_mass*EXPECTED_AXIAL_DISTRIBUTION_PERCENTAGE[i][axial]
                new_crud_matrix[i,:,:,j] = layer_crud_mass*radial_crud

        return new_crud_matrix

    def calculate_assembly_max_sum(self,matrix):
        """
        Calculates the maximum sum of values in an assembly for a 193 assembly core
        using 17 x 17 fuel assemblies.

        Written by Brian Andersen 11/2/2020.
        """
        assembly_sum_value = 0.
        number_states = matrix.shape[0]
        for row in self.assembly_tuple_193_17_17:
            r1 = row[0]
            r2 = row[1]
            for col in self.assembly_tuple_193_17_17:
                c1 = col[0]
                c2 = col[1]
                for i in range(number_states):
                    temp_sum = numpy.sum(matrix[i,r1:r2,c1:c2,:])

                    if temp_sum > assembly_sum_value:
                        assembly_sum_value = temp_sum

        return float(assembly_sum_value)

    def calculate_core_max_sum(self,matrix):
        """
        Sums values over entire core for each depletion state.
        Returns the maximum sum over the given set of depletion states

        Written by Brian Andersen. 11/2/2020
        """
        core_sum_value = 0.
        number_states = matrix.shape[0]
        for i in range(number_states):
            temp_sum = numpy.sum(matrix[i,:,:,:])
            if temp_sum > core_sum_value:
                core_sum_value = temp_sum

        return float(core_sum_value)

    def calculate_core_crud_mass_at_state(self,matrix,state):
        
        core_sum = numpy.sum(matrix[state,:,:,:])
        return float(core_sum)

    def calculate_number_crud_assemblies(self,matrix):
        """
        Returns a list of the number of assemblies at each state with CRUD.
        To overcome issues of small amounts of CRUD present on Fuel assemblies,
        an assembly is considered to have CRUD if the assembly sum is greater 
        than the average CRUD per rod, multiplied by 264 for the number of 
        heated fuel rods.

        Written by Brian Andersen 2/10/2021.
        """
        average_crud_mass = numpy.average(matrix)
        average_assembly_crud = 264. * average_crud_mass
        number_states = matrix.shape[0]
        assembly_count_list = []
        for i in range(number_states):
            state_assembly_count = 0
            for row in self.assembly_tuple_193_17_17:
                r1 = row[0]
                r2 = row[1]
                for col in self.assembly_tuple_193_17_17:
                    c1 = col[0]
                    c2 = col[1]
                    assembly_sum = numpy.sum(matrix[i,r1:r2,c1:c2,:])
                    if assembly_sum > average_assembly_crud:
                        state_assembly_count += 1

            assembly_count_list.append(state_assembly_count)

        return assembly_count_list

    def print_prediction(self,matrix,label):
        """
        Prints out the neural network predictions of the matrix.
        """
        states,j,k,layers = matrix.shape
        for sta in range(states):
            for lay in range(layers):
                fig,axes = pyplot.subplots(nrows=1,ncols=1)
                ax0 = axes
                im = ax0.imshow(matrix[sta,:,:,lay])
                cbar = fig.colorbar(im,ax=ax0)
                ax0.set_title(f'CRUD Prediction State {sta} Layer {lay}')
                pyplot.savefig(f'{label}_{sta}_{lay}.png')
                pyplot.close()


class CRUDworks(object):
    """
    Class for evaluating all objectives related to CRUD optimization.
    """
    def __init__(self,settings):
        info = settings['neural_network']
        self.predict = Predictor(info)
        
        self.assembly_tuple_193_17_17 = ((0,16),(17,33),(34,50),(51,67),(68,84),(85,101),(102,118),(119,135))
        self.MESH = (11.951,15.817,24.028,32.239,40.45,48.662,56.873,65.084,73.295,77.105,
                     85.17,93.235,101.3,109.365,117.43,125.495,129.305,137.37,145.435,153.5,
                     161.565,169.63,177.695,181.505,189.57,197.635,205.7,213.765,221.83,229.895,
                     233.705,241.77,249.835,257.9,265.965,274.03,282.095,285.905,293.97,302.035,
                     310.1,318.165,326.23,334.295,338.105,346.0262,353.9474,361.8686,369.7898,377.711)
        self.adjust = Adjustor(list(self.predict.crud_network_dictionary.keys()))
        self.calculate = Calculator(list(self.predict.crud_network_dictionary.keys()))

        self.out_of_crud_bounds = False
        self.out_of_bounds_value = 0.
        self.boron_limit = 1500.
        self.FDH_limit = 1.7

        self.supported_boron_objectives = None
        self.supported_crud_objectives = ('max_core_crud','max_assembly_crud','core_crud_at_state',
                                          'deviation_from_uniform','crud_boron_at_state',
                                          'calculate_boron','number_crud_assemblies','crud_boron_sum')

    def calculate_core_life_boron_sum(self,boron_list,crud_mass_dict,efpd_list):
        """
        Calculates the total sum of boron absorbed in CRUD over reactor life span.
        """
        if self.out_of_crud_bounds:
            return self.out_of_bounds_value
        else:
            core_boron_list = self.calculate_core_boron_mass_list(boron_list,crud_mass_dict,efpd_list)

            return sum(core_boron_list)

    def calculate_max_core_boron_mass(self,boron_list,crud_mass_dict,efpd_list):
        """
        Returns the maximum mass of boron in the CRUD. Done this way so that this can function as a clean objective 
        function. 
        """
        if self.out_of_crud_bounds:
            return self.out_of_bounds_value
        else:
            core_boron_list = self.calculate_core_boron_mass_list(boron_list,crud_mass_dict,efpd_list)

            return max(core_boron_list)    

    def calculate_core_boron_mass_at_state(self,boron_list,crud_mass_dict,efpd_list,state):
        """
        Returns the maximum mass of boron in the CRUD. Done this way so that this can function as a clean objective 
        function. 
        """
        if self.out_of_crud_bounds:
            return self.out_of_bounds_value
        else:
            core_boron_list = self.calculate_core_boron_mass_list(boron_list,crud_mass_dict,efpd_list)

            return core_boron_list[state]   

    def calculate_core_boron_mass_list(self,boron_list,crud_mass_dict,efpd_list):
        """
        Calculates the mass of boron absorbed in CRUD
        """
        boron_mass_list = []
        boron_mass_matrix = self.calculate_core_boron_matrix(boron_list,crud_mass_dict,efpd_list)
        #boron_mass_matrix = self.adjust.convert_to_mass(boron_density_matrix)
        boron_mass = numpy.sum(boron_mass_matrix,axis=(1,2,3))
        
        for mass in boron_mass:
            boron_mass_list.append(float(mass)*4.)

        return boron_mass_list

    def calculate_core_boron_matrix(self,boron_list,crud_mass_dict,efpd_list):
        """
        Calculates the Mass density of boron in the core based on the expected CRUD
        distribution
        """
        octant_matrix = self.adjust.octant_symmetry(self.predict.mass_density_distribution)
        max_list = numpy.sum(octant_matrix,axis=(1,2))
        norm_crud_matrix = numpy.zeros(octant_matrix.shape)
        for sta in range(max_list.shape[0]):
            for ax in range(max_list.shape[1]):
                if max_list[sta,ax]:
                    norm_crud_matrix[sta,:,:,ax] = numpy.divide(octant_matrix[sta,:,:,ax],max_list[sta,ax])
        whole_core_crud = self.calculate.total_core_CRUD_distribution(norm_crud_matrix)
        whole_core_crud_massdensity = numpy.zeros(whole_core_crud.shape)
        whole_core_boron_massdensity = numpy.zeros(whole_core_crud.shape)
        whole_core_boron = numpy.zeros(whole_core_crud.shape)
        for sta in range(whole_core_crud.shape[0]):
            for ax in range(whole_core_crud.shape[3]):
                 whole_core_crud[sta,:,:,ax] *= EXPECTED_AXIAL_DISTRIBUTION_PERCENTAGE[sta][ax]
            efpd = efpd_list[sta]
            print(efpd)
            lowefpd,highefpd = self.calculate.return_upper_lower_keys(efpd,crud_mass_dict)
            print(lowefpd,highefpd)
            crud_mass = self.calculate.interpolate(crud_mass_dict[lowefpd],crud_mass_dict[highefpd],lowefpd,highefpd,efpd)
            print(crud_mass)
            whole_core_crud[sta,:,:,:] *= crud_mass
        for sta in range(whole_core_crud.shape[0]):
            for ax in range(whole_core_crud.shape[3]):
                whole_core_crud_massdensity[sta,:,:,ax] = numpy.divide(whole_core_crud[sta,:,:,ax],VERA_AXIAL_LENGTH[ax])
        for sta,boron in enumerate(boron_list):
            whole_core_boron_massdensity[sta,:,:,:] = self.calculate.pin_boron_density(whole_core_crud_massdensity[sta,:,:,:],boron)
        for ax in range(whole_core_boron_massdensity.shape[-1]):
            whole_core_boron[:,:,:,ax] = whole_core_boron_massdensity[:,:,:,ax]*VERA_AXIAL_LENGTH[ax]
        
        return whole_core_boron

    def calculate_number_crud_assemblies_at_state(self,state):
        if self.out_of_crud_bounds:
            return self.out_of_bounds_value

        assembly_list = self.calculate_number_crud_assemblies()

        return(assembly_list[state])


    def calculate_number_crud_assemblies(self):
        """
        Returns a list of the number of assemblies at each state with CRUD.
        To overcome issues of small amounts of CRUD present on Fuel assemblies,
        an assembly is considered to have CRUD if the assembly sum is greater 
        than the average CRUD per rod, multiplied by 264 for the number of 
        heated fuel rods.

        Written by Brian Andersen 2/10/2021.
        """
        
        octant_crud_distribution = self.adjust.octant_symmetry(self.predict.mass_density_distribution)
        average_mass_density = numpy.average(octant_crud_distribution)
        average_assembly_crud = 264. * average_mass_density
        number_states = octant_crud_distribution.shape[0]
        assembly_count_list = []
        for i in range(number_states):
            state_assembly_count = 0
            for row in self.assembly_tuple_193_17_17:
                r1 = row[0]
                r2 = row[1]
                for col in self.assembly_tuple_193_17_17:
                    c1 = col[0]
                    c2 = col[1]
                    assembly_sum = numpy.sum(octant_crud_distribution[i,r1:r2,c1:c2,:])
                    if assembly_sum > average_assembly_crud:
                        state_assembly_count += 1

            assembly_count_list.append(state_assembly_count)

        return assembly_count_list

    def calculate_core_max_sum(self):
        """
        Sums values over entire core for each depletion state.
        Returns the maximum sum over the given set of depletion states

        Written by Brian Andersen. 11/2/2020
        """
        if self.out_of_crud_bounds:
            return self.out_of_bounds_value

        mass_matrix = self.adjust.convert_to_mass(self.predict.mass_density_distribution)
        core_sum_value = 0.
        number_states = self.predict.mass_density_distribution.shape[0]
        for i in range(number_states):
            temp_sum = numpy.sum(mass_matrix[i,:,:,:])
            if temp_sum > core_sum_value:
                core_sum_value = temp_sum

        return float(core_sum_value)

    def calculate_deviation_from_uniform(self,state):
        """
        Calcalates the value by which all CRUD mass_densities deviate 
        from the uniform expected CRUD mass density
        """
        if self.out_of_crud_bounds:
            return self.out_of_bounds_value

        tuple_of_column_rows = (((0,136),(0,68)),((0,119),(68,102)),((0,102),(102,119)),((0,68),(119,136)))
        octant_matrix = self.adjust.octant_symmetry(self.predict.mass_density_distribution)
        octant_matrix /= numpy.sum(octant_matrix)
        octant_matrix *= 10.
        sum_of_crud = 0.
        for tuple_ in tuple_of_column_rows:
            x = tuple_[0]
            y = tuple_[1]
            sum_of_crud += numpy.sum(octant_matrix[state,x[0]:x[1],y[0]:y[1],:])
        average_crud = sum_of_crud/14784.   #264 fuel rods * 56 assemblies
        deviation = numpy.abs(octant_matrix-average_crud)
        sum_of_deviation = 0.
        for tuple_ in tuple_of_column_rows:
            x = tuple_[0]
            y = tuple_[1]
            sum_of_deviation += numpy.sum(deviation[state,x[0]:x[1],y[0]:y[1],:])

        return sum_of_deviation
         
    def calculate_crud_under_threshold(self,state):
        """
        Sums values over entire core for each depletion state.
        Returns the maximum sum over the given set of depletion states

        Written by Brian Andersen. 11/2/2020
        """
        if self.out_of_crud_bounds:
            return self.out_of_bounds_value

        octant_matrix = self.adjust.octant_symmetry(self.predict.mass_density_distribution)
        mass_matrix = self.adjust.convert_to_mass(oct)
        core_sum_value = 0.
        number_states = self.predict.mass_density_distribution.shape[0]
        for i in range(number_states):
            temp_sum = numpy.sum(mass_matrix[i,:,:,:])
            if temp_sum > core_sum_value:
                core_sum_value = temp_sum

        return float(core_sum_value)


    def get_crud_distribution(self,power,boron,nickel,efpd,FDH):
        """
        Function for using neural networks to predict the core wide CRUD distribution.
        """
        if max(boron) < self.boron_limit and max(FDH) < self.FDH_limit:
            states,rows,cols,levels = power.shape
            diff_matrix = numpy.zeros([states-1,rows,cols,levels])
            core_in = numpy.zeros([states-1,3])
            for i in range(states-1):
                diff_matrix[i,:,:,:] = power[i+1,:,:,:] - power[i,:,:,:]
                core_in[i,0] = boron[i+1]/1433.8          #Maximum boron in training dataset
                core_in[i,1] = nickel[i+1]/8.161141015  #Maximum value? or Average in training dataset
                core_in[i,2] = efpd[i+1]/541.7            #Maximum cycle length in training dataset.

            self.predict.CRUD_density_distribution(diff_matrix,core_in)
        else:
            self.out_of_crud_bounds = True
            
class Adjustor(object):
    """
    Class designed to adjust the CRUD distributions in various ways.
    """
    def __init__(self,axial_list):
        self.axial_layers = axial_list
        

    @staticmethod
    def octant_symmetry(matrix):
        """
        Ensures that the predicted CRUD matrix is actually in octant symmetry
        """
        adjusted_matrix = numpy.zeros(matrix.shape)
        rows = matrix.shape[1]
        cols = matrix.shape[2]
        for r in range(rows):
            for c in range(cols):
                adjusted_matrix[:,r,c,:] = (matrix[:,r,c,:]+matrix[:,c,r,:])/2.
    
        return adjusted_matrix

    def convert_to_mass(self,matrix):
        """
        Returns a matrix of pin level CRUD masses by multiplying the supplied
        pin mass density matrix by the axial pin surface area.
        """
        adjusted_matrix = numpy.zeros(matrix.shape)
        for i,axial in enumerate(self.axial_layers):
            adjusted_matrix[:,:,:,i] = matrix[:,:,:,i]*VERA_AXIAL_LENGTH[axial]

        return adjusted_matrix

    def convert_to_mass_density(self,matrix):
        """
        Returns a matrix of pin level CRUD mass densities by dividing the supplied
        pin mass matrix by the axial pin surface area.
        """
        adjusted_matrix = numpy.zeros(matrix.shape)
        for i,axial in enumerate(self.axial_layers):
            adjusted_matrix[:,:,:,i] = matrix[:,:,:,i]/VERA_AXIAL_LENGTH[axial]

        return adjusted_matrix

class Predictor(object):
    """
    Performs all operations related to making predictions with the neural network.
    """
    def __init__(self,info):
        self.crud_network_dictionary = info['crud_networks']
        self.number_crud_layers = len(list(self.crud_network_dictionary.keys()))
        if 'boron_networks' in info:
            self.boron_network_dictionary = info['boron_networks']
            self.number_boron_layers = len(list(self.boron_network_dictionary))    
            self.boron_crud_normalization = info['boron_crud_normalization']
            self.boron_normalization = info['boron_normalization']
        else:
            self.boron_network_dictionary = {}
        self.boron_matrix = None
    

    def CRUD_density_distribution(self,diff_matrix,core_in):
        """
        Predicts the crud distribution based on the differences in pin power, boron, and cycle exposures.
        Note nickel particulate concentration has to be provided by the user in the input file, as
        it doesn't come from the SIMULATE output file. 
        
        Written by Brian Andersen 11/2/2020.
        """ 
        import tensorflow
        from tensorflow import keras
        import tensorflow.keras.backend as K
        from tensorflow.keras import Input,layers,models,optimizers
        number_states,rows,cols,axial = diff_matrix.shape
        self.mass_density_distribution = numpy.zeros([number_states+1,rows,cols,self.number_crud_layers])
        for i,axial in enumerate(self.crud_network_dictionary):
            crud_model = models.load_model(self.crud_network_dictionary[axial],custom_objects={'magnitude_error':magnitude_error,'maximum_error':maximum_error})

            prediction = crud_model.predict([diff_matrix,core_in])
            #prediction = crud_model.predict([diff_matrix,crud_matrix[1:,:,:,:],core_in]) #predict crud over all states
            #                                                                             #undo training normalization
            prediction *= MAX_DICTIONARY['crud_pin'][axial]
            for ss in range(number_states):                        
                if not ss:
                    pass       #Zero burnup means zero crud deposition
                else:
                    self.mass_density_distribution[ss,:,:,i] = self.mass_density_distribution[ss-1,:,:,i] + prediction[ss-1,:,:,0] #Crud buildup is current crud plus predicted change in crud.
                    for r in range(rows):
                        for c in range(cols):
                            if self.mass_density_distribution[ss,r,c,i] < 0.:
                                self.mass_density_distribution[ss,r,c,i] = 0.
        K.clear_session()   
        
    def predict_boron_distribution(self,crud_in,solution_name):
        """
        Predicts the boron distribution based on the differences on the CRUD distribution, boron, and cycle exposures.
        Note nickel particulate concentration has to be provided by the user in the input file, as
        it doesn't come from the SIMULATE output file. 

        Written by Brian Andersen 11/2/2020.
        """
        number_states,row,column,number_layers = crud_in.shape 
        input_ = h5py.File(f"{solution_name}/crud_input.h5",'r')
        core_in = input_['core_in'][:,:] 
        input_.close()

        boron_matrix = numpy.zeros([number_states,row,column,self.number_boron_layers])
        layer_crud = numpy.zeros([number_states,row,column,1])
        for i,axial in enumerate(self.boron_network_dictionary):
            boron_model = models.load_model(self.boron_network_dictionary[axial],custom_objects={'magnitude_error':magnitude_error,'maximum_error':maximum_error})

            layer_crud[:,:,:,0] = numpy.divide(crud_in,MAX_DICTIONARY['crud_pin'][axial]) 
            prediction = boron_model.predict([layer_crud,core_in]) #predict crud over all states
            prediction *= MAX_DICTIONARY['boron_pin'][axial]        #undo training normalization
            for ss in range(number_states):                        
                for r in range(row):
                    for c in range(column):
                        if boron_matrix[ss,r,c,i] < 0.:
                            boron_matrix[ss,r,c,i] = 0.

        K.clear_session()   
        return boron_matrix
        

class Calculator(object):
    """
    Class used to calculate values related to CRUD parameters of interest.
    """
    def __init__(self,axial_list):
        self.axial_list = axial_list[:]
        self.axial_list.sort()
        self.reverse_axial_list = axial_list[:]
        self.reverse_axial_list.reverse()
        

    def boron_mass_density(self,crud_mass_density,boron_concentration):
        """
        Calculates the total boron mass in the CRUD using Andrew's Formula for boron mass.
        The formula is linear, hence the slope, intercept notation. Andrew originally used y=mx+b notation.
        
        First calculates the total CRUD Mass, then calculates the total Boron Mass in CRUD.
        """
        num_states,rows,cols,axial = crud_mass_density.shape
        
        boron_density_matrix = numpy.zeros(crud_mass_density.shape)
        
        for boron,state in zip(boron_concentration,range(num_states)):
            for r in range(rows):
                for c in range(cols):
                    for a in range(axial):
                        boron_density_matrix[state,r,c,a] = self.pin_boron_density(crud_mass_density[state,r,c,a],boron)
                                                         
        return boron_density_matrix

    def pin_boron_density(self,crud,boron):
        """
        Calculates Boron Density on a single pin
        """ 
        if boron >= 1300.0:
            value = 0.1649*crud-0.0006
        elif boron >= 1100.:
            one =  0.1649*crud-0.0006
            two = 0.1729*crud-0.0007
            value = self.interpolate(one,two,1300.,1100.,boron)
        elif boron >= 900.:
            one = 0.1729*crud-0.0007
            two = 0.1672*crud-0.0007
            value = self.interpolate(one,two,1100.,900.,boron)
        elif boron >= 700.:
            one = 0.1672*crud-0.0007
            two = 0.1685*crud-0.0007
            value = self.interpolate(one,two,900.,700.,boron)
        elif boron >= 500.:
            one = 0.1685*crud-0.0007
            two = 0.1664*crud-0.0007
            value = self.interpolate(one,two,700.,500.,boron)
        elif boron >= 300.:
            one = 0.1664*crud-0.0007
            two = 0.1617*crud-0.0008
            value = self.interpolate(one,two,500.,300.,boron)
        elif boron >= 100.:
            one = 0.1617*crud-0.0008
            two = 0.174*crud-0.0008
            value = self.interpolate(one,two,300.,100.,boron)
        else:
            one = 0.174*crud-0.0008
            value = self.interpolate(one,numpy.zeros(crud.shape),100.0,0.,boron)       
        
        numpy.place(value,value<0.0,0.)

        return value

    @staticmethod
    def interpolate(lowy,highy,lowx,highx,point):
        """
        Performs linear interpolation
        """
        return lowy +(highy-lowy)*((point-lowx)/(highx-lowx))

    @staticmethod
    def average(lowy,highy,lowx,highx,point):
        """
        Performs average of values, using low and high as weights for average.
        """
        low_frac = (point-lowx)/(highx-lowx)
        high_frac = (highx - point)/(highx-lowx)
        
        return low_frac*lowy + high_frac*highy

    def expected_mass_distribution(self,crud,mass,state):
        """
        Returns a matrix of the expected Mass distribution for the provided 
        values. Predicts a single axial layer
        """
        expected_crud = numpy.zeros([136,136,len(self.axial_list)])
        for i,axial in enumerate(self.axial_list):
            sum_ = numpy.sum(crud[:,:,i])
        
            if not sum_:
                radial_crud = numpy.zeros([136,136])
            else:
                radial_crud = crud[:,:,i]/sum_

            expected_crud[:,:,i] = mass*EXPECTED_AXIAL_DISTRIBUTION_PERCENTAGE[state][axial]*radial_crud

        return expected_crud

    def proportion_of_total_distribution(self,state):
        """
        Uses the provided axial layers to determine if the modeled CRUD mass represents 5, 10,
        35% of expected CRUD distribution.
        """
        total_percent = 0.
        for axial in self.axial_list:
            total_percent += EXPECTED_AXIAL_DISTRIBUTION_PERCENTAGE[state][axial]

        return total_percent

    def total_core_CRUD_distribution(self,crud_matrix):
        """
        Linearly interpolates an array of values over the entire core.
        """
        num_states = crud_matrix.shape[0]
        whole_core_crud = numpy.zeros([num_states,136,136,49])
        for a in range(num_states):
            for i in range(49):
                if i < min(self.axial_list):
                    #whole_core_crud[a,:,:,i] = self.average(numpy.full((136,136),5.407e-5),crud_matrix[a,:,:,0],float(min(self.axial_list)),0.,float(i))
                    whole_core_crud[a,:,:,i] = self.average(numpy.full((136,136),5.407e-5),crud_matrix[a,:,:,0],0.,float(min(self.axial_list)),float(i))
                elif i > max(self.axial_list):
                    #whole_core_crud[a,:,:,i] = self.average(crud_matrix[a,:,:,-1],numpy.full((136,136),5.407e-5),50.,float(max(self.axial_list)),float(i))
                    whole_core_crud[a,:,:,i] = self.average(crud_matrix[a,:,:,-1],numpy.full((136,136),5.407e-5),float(max(self.axial_list)),50.0,float(i))
                elif i in self.axial_list:
                    position = self.axial_list.index(i)
                    whole_core_crud[a,:,:,i] = crud_matrix[a,:,:,position]
                else:
                    for count,low in enumerate(self.axial_list):
                        if low < i:
                            matrix_min_ = count
                            point_min_ = float(low)
                    for count,high in enumerate(self.reverse_axial_list):
                        if high > i:
                            matrix_max_ = count
                            point_max_ = float(high)
                    whole_core_crud[a,:,:,i] = self.average(crud_matrix[a,:,:,matrix_min_],crud_matrix[a,:,:,matrix_max_],point_min_,point_max_,float(i))               
                    
        return whole_core_crud

    @staticmethod
    def return_upper_lower_keys(value,dict_):
        """
        Returns the dictionary keys for the upper and lower values. 
        Used to determine what keys are used for determining total core CRUD mass
        """
        key_list = list(dict_.keys())
        min_ = 0.
        for key in key_list:
            if key < value:
                min_ = key
        
        max_ = 0
        key_list.reverse()
        for key in key_list:
            if key > value:
                max_ = key

        return min_,max_